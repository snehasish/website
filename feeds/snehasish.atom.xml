<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Snehasish</title><link href="http://www.snehasish.net/" rel="alternate"></link><link href="http://www.snehasish.net/feeds/snehasish.atom.xml" rel="self"></link><id>http://www.snehasish.net/</id><updated>2013-01-12T00:00:00-05:00</updated><entry><title>SublimeText and the Linux kernel</title><link href="http://www.snehasish.net/notes/sublime-text-and-linux-kernel/" rel="alternate"></link><updated>2013-01-12T00:00:00-05:00</updated><author><name>Snehasish</name></author><id>tag:www.snehasish.net,2013-01-12:notes/sublime-text-and-linux-kernel/</id><summary type="html">&lt;p&gt;In the kernel source root directory, we will create a list of files we want cscope to index. We are going to be looking at only the i386 architecture files and leave out the rest. Assuming cscope is installed and present in the path.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Ensure that the source tree is clean, and then generate a list of files to be indexed&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;make clean
find  .                                                                 \
    -path &amp;quot;./arch/*&amp;quot; ! -path &amp;quot;./arch/i386*&amp;quot; -prune -o                   \
    -path &amp;quot;./include/asm-*&amp;quot; ! -path &amp;quot;./include/asm-i386*&amp;quot; -prune -o     \
    -path &amp;quot;./tmp*&amp;quot; -prune -o                                            \
    -path &amp;quot;./Documentation*&amp;quot; -prune -o                                  \
    -path &amp;quot;./scripts*&amp;quot; -prune -o                                        \
    -path &amp;quot;./drivers*&amp;quot; -prune -o                                        \
        -name &amp;quot;*.[chxsS]&amp;quot; -print &amp;gt; cscope.files
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Create the cscope index using &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;cscope -b -q -k
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Invoke the interactive browser with&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;cscope -d
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Or use it from the command line as ( also refer manpage )&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;cscope -dL -Xpattern 
# Where X can be one of:
# 0 ==&amp;gt; C symbol
# 1 ==&amp;gt; function definition
# 2 ==&amp;gt; functions called by this function
# 3 ==&amp;gt; functions calling this function
# 4 ==&amp;gt; text string
# 5 ==&amp;gt; egrep pattern
# 6 ==&amp;gt; files #including this file
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;/ol&gt;</summary><category term="sublime text"></category><category term="linux"></category><category term="kernel"></category><category term="cscope"></category><category term="plugin"></category></entry><entry><title>Building and Testing GCC 4.7.2</title><link href="http://www.snehasish.net/notes/building-and-testing-gcc-4.7.2/" rel="alternate"></link><updated>2013-01-11T00:00:00-05:00</updated><author><name>Snehasish</name></author><id>tag:www.snehasish.net,2013-01-11:notes/building-and-testing-gcc-4.7.2/</id><summary type="html">&lt;p&gt;Steps to build GCC 4.7.2 from source on Ubuntu 12.04 (64 bit). GCC ( GNU Compiler Collection) contains compilers for many languages, here we will only be compiling it for C and C++.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Grab a tarball of the release from one of the &lt;a href="http://gcc.gnu.org/mirrors.html"&gt;mirrors&lt;/a&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;cd ~/Downloads
wget http://gcc.parentingamerica.com/releases/gcc-4.7.2/gcc-4.7.2.tar.bz2
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Extract the tarball&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;tar jxvf gcc-4.7.2.tar.bz2
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Install the prerequisite packages&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo apt-get install libgmp-dev  \
                     libmpfr-dev \
                     libmpc-dev  \
                     m4 \
                     libc6-dev-i386
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Add a link to the standard location for x86_64-linux-gnu&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo ln -s /usr/lib/x86_64-linux-gnu /usr/lib64
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Create a directory to build in your home directory&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;mkdir ~/gcc-4.7.2-build
cd ~/gcc-4.7.2-build
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Run configure with the given options. This will set the installation dir for gcc-4.7.2 to ~/gcc-4.7.2&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;HOME&lt;/span&gt;&lt;span class="x"&gt;/Downloads/gcc-4.7.2/configure --build=x86_64-linux-gnu --prefix=&lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;HOME&lt;/span&gt;&lt;span class="x"&gt;/gcc-4.7.2 --enable-languages=c,c++ --disable-multilib --program-suffix=-4.7&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Make! ( in parallel, with number of threads set to the number of processors on your system)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;grep processor /proc/cpuinfo | wc -l | xargs make -j
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Next install dejagnu&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo apt-get install dejagnu autogen
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Run the testsuite from the current directory, the k flag ensures that errors do not halt the process. Errors will occur as we only build a subset of the languages available&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;make -k check # Check all the things!
make -k check-c++ # Check only g++
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Install the binaries into the folder specified using&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;make install
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Add the binaries to your path by adding the following lines into your .bashrc&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="x"&gt;gedit &lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;HOME&lt;/span&gt;&lt;span class="x"&gt;/.bashrc&lt;/span&gt;
&lt;span class="x"&gt;export PATH=&lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;HOME&lt;/span&gt;&lt;span class="x"&gt;/gcc-4.7.2/bin:&lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;PATH&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="x"&gt;export LD_LIBRARY_PATH=&lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;HOME&lt;/span&gt;&lt;span class="x"&gt;/gcc-4.7.2/lib:&lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;HOME&lt;/span&gt;&lt;span class="x"&gt;/gcc-4.7.2/lib64:&lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;LD_LIBRARY_PATH&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Source the file&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="x"&gt;. &lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;HOME&lt;/span&gt;&lt;span class="x"&gt;/.bashrc&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;You can now check to see if our binaries are in the path&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;g++-4.7 --version
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Expected output&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;g++-4.7 (GCC) 4.7.2
Copyright (C) 2012 Free Software Foundation, Inc.
This is free software; see the source for copying conditions.  There is NO
warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;We can now go ahead and use all the new features present in g++ for the new c++0x standard.&lt;/p&gt;</summary><category term="gcc"></category><category term="build"></category><category term="test"></category></entry><entry><title>Reverse tunneling using Hamachi</title><link href="http://www.snehasish.net/notes/reverse-tunneling-using-hamachi/" rel="alternate"></link><updated>2013-01-10T00:00:00-05:00</updated><author><name>Snehasish</name></author><id>tag:www.snehasish.net,2013-01-10:notes/reverse-tunneling-using-hamachi/</id><summary type="html">&lt;p&gt;Here is how to ssh into a remote host behind a firewall / http proxy using hamachi. 
Root privileges are required in the described method.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Install the 32 bit or 64 bit version of hamachi using the &lt;a href="https://secure.logmein.com/labs/"&gt;deb files available on their website&lt;/a&gt; on both machines. Use the synaptic package manager or use&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo dpkg -i logmein-hamachi_2.1.0.86-1_amd64.deb
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The daemon should automatically start after installation. Log into the hamachi network, then set your desired nickname using and create a network from one of the computers using:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo hamachi login
sudo hamachi set-nick &amp;lt;nickname&amp;gt;
sudo hamachi create &amp;lt;network-name&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;This may fail if the machine is behind a http proxy. Hamachi uses ports 12975 and 32976 to communicate with the central server, failing which it tries 443 (SSL). In case the machine is behind a HTTP Proxy, the settings need to be overridden:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo gedit /var/lib/logmein-hamachi/h2-engine-override.cfg
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Add the following lines, where the format should be similar to the file h2-engine.cfg in the same folder:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Conn.PxyAdd     &amp;lt;Proxy IP Address&amp;gt;
Conn.PxyPort    &amp;lt;Proxy Port&amp;gt;
Conn.Mask       4
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Restart the hamachi daemon:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo /etc/init.d/logmein-hamachi restart
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;For troubleshooting, take a look at the log file:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;tail /var/lib/logmein-hamachi/h2-engine.log
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Join the hamachi network from the other computer using &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo hamachi join &amp;lt;network-name&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;On the machine you wish to log into, install openssh-server&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo apt-get install openssh-server
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Check out the hamachi IP of the machine you want to log into (host)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo hamachi list # Third field 
ifconfig # On the host machine, check the ip address of the ham0 network
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;You can now log into the host using &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;ssh username@&amp;lt;hamachi-ip&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;For a more detailed guide where you can setup RDP and File Sharing, &lt;a href="http://www.thefanclub.co.za/how-to/how-remote-login-access-and-control-computers-using-logmein-hamachi-and-haguichi-ubuntu-1204"&gt;check out this link&lt;/a&gt;.&lt;/p&gt;</summary><category term="hamachi"></category><category term="ubuntu"></category><category term="tunneling"></category><category term="ssh"></category></entry><entry><title>Scrape a Reddit AMA</title><link href="http://www.snehasish.net/notes/scrape-reddit-ama/" rel="alternate"></link><updated>2012-12-27T00:00:00-05:00</updated><author><name>Snehasish</name></author><id>tag:www.snehasish.net,2012-12-27:notes/scrape-reddit-ama/</id><summary type="html">&lt;p&gt;Sometime late last year I came across an Ask Me Anything (AMA) thread a someone from Intel Corp. Before the 2012 US Presidential election, President Obama had performed a similar AMA thread on Reddit which quickly became a viral hit. Anyway, while browsing the Intel thread I encountered a lot of comments from users which did not add to the topic of discussion. So I wrote a scraper using Python Reddit API Wrapper which picks out the top level comment threads which have replies from the original poster (OP) and following discussions. This is quick and eliminates almost all of the useless cruft. I realise I may be missing some insightful comments by other users, but it's a tradeoff I am willing to make. Below is an excerpt from the AMA. The code is available on &lt;a href="https://github.com/snehasish/AMAScraper"&gt;github&lt;/a&gt;.&lt;/p&gt;
&lt;hr /&gt;
&lt;h4&gt;Question&lt;/h4&gt;
&lt;p&gt;Favourite branch predictor?&lt;/p&gt;
&lt;h4&gt;Answer&lt;/h4&gt;
&lt;p&gt;Bimodal.&lt;/p&gt;
&lt;hr /&gt;
&lt;h4&gt;Question&lt;/h4&gt;
&lt;p&gt;What is your educational and work experience background? I'm an EE undergrad and working for a place like intel sounds extremely interesting, what kind of knowledge would I need for a job like yours?&lt;/p&gt;
&lt;h4&gt;Answer&lt;/h4&gt;
&lt;p&gt;I have a BS and MS and have mostly worked in circuit design. Interest for the most part, willingness to learn helps a lot. We have a ton of internships every summer and you can start there as an undergrad. PM me if you want to send me your resume.&lt;/p&gt;
&lt;p&gt;Personally, my EE coursework was very circuits-heavy. Particularly VLSI, but analog is essential to ace interviews. Comp. Arch. and device physics concentrations also help. And please, be sure you can code (any C-like language at least) and understand statistics. Skills beyond the technical are necessary to get more interesting work as well so be sure to also develop those.&lt;/p&gt;
&lt;h4&gt;Question&lt;/h4&gt;
&lt;p&gt;I take it you do a lot of work in Verilog? I got a taste of Computer Architecture and Chip design in my Masters program this fall as a Computer Engineer, granted it was all VHDL and just FPGAs.&lt;/p&gt;
&lt;p&gt;But learning all about the packaging methods, development, and life-cycle planning was a blast. It was a course that was a big eye opener for me as a Software Engineer, so thanks for all your hardwork on these low levels so guys like me can keep our abstractions :P&lt;/p&gt;
&lt;h4&gt;Answer&lt;/h4&gt;
&lt;p&gt;Glad to have helped. Verilog and FPGAs is how I started. So you're getting there.&lt;/p&gt;
&lt;hr /&gt;
&lt;h4&gt;Question&lt;/h4&gt;
&lt;p&gt;How often do you get feedback from software developers concerning possible improvements in  the architecture?&lt;/p&gt;
&lt;h4&gt;Answer&lt;/h4&gt;
&lt;p&gt;Often. We get benchmark traces even more often. Google and Microsoft are some of the most prolific. Google on power-perf and Microsoft on compatibility issues.&lt;/p&gt;
&lt;hr /&gt;
&lt;h4&gt;Question&lt;/h4&gt;
&lt;p&gt;How do you feel about AMD?
(No really, let it out :))&lt;/p&gt;
&lt;h4&gt;Answer&lt;/h4&gt;
&lt;p&gt;They have fantastic people. I cannot underscore this enough, with the resources they have the fact that they're able to compete in the same ballpark we do shows their quality. Sadly for all of us, execution is key. We want to see an exciting marketplace as much as you do.&lt;/p&gt;
&lt;h4&gt;Question&lt;/h4&gt;
&lt;p&gt;You mean something like selling all of your fabrication capacity is a bad idea?&lt;/p&gt;
&lt;p&gt;Or do they have design issues now and are falling behind?&lt;/p&gt;
&lt;h4&gt;Answer&lt;/h4&gt;
&lt;p&gt;AMD had to sell their fabs, otherwise they wouldn't be in business today. There are advantages to having fabs. You'll see many things, especially with Broadwell, that you cannot do without owning a fab.&lt;/p&gt;
&lt;p&gt;The design issues we see today are things that happened a year, maybe a year-and-a-half, ago. But they were falling behind behind and it's hard to recover.&lt;/p&gt;
&lt;h4&gt;Question&lt;/h4&gt;
&lt;p&gt;Can you elaborate on the benefits expected for consumers using Broadwell that would not be possible without Intel owning a fab?&lt;/p&gt;
&lt;h4&gt;Answer&lt;/h4&gt;
&lt;p&gt;That surprise is not mine to divulge, at least not today. Sorry.&lt;/p&gt;
&lt;h4&gt;Question&lt;/h4&gt;
&lt;p&gt;Thanks for this :). We at AMD (especially on the GPU side) have a intense amount of respect for the engineers over at Intel. What Intel has done with their recent CPU architecture, along with the &lt;em&gt;constant&lt;/em&gt; advances in fabrication technology, they deserve a lot of credit for "keeping the ball moving forward" in our industry. &lt;/p&gt;
&lt;p&gt;To support jecb's argument, you often hear of negative press going on between the two companies, but that kind of animosity is largely isolated to the legal, marketing, and upper management levels. The engineers at most companies tend to have many good friends working for competitors, and while we might throw in a friendly jab every now and then, it's almost a universally friendly community. &lt;/p&gt;
&lt;p&gt;Thanks for this AMA. It's always cool to hear what it's like on the blue team :). &lt;/p&gt;
&lt;h4&gt;Answer&lt;/h4&gt;
&lt;p&gt;Appreciate the thoughts and echo them back.&lt;/p&gt;</summary><category term="reddit"></category><category term="programming"></category><category term="python"></category></entry><entry><title>SPLASH2</title><link href="http://www.snehasish.net/notes/splash-2/" rel="alternate"></link><updated>2012-11-03T00:00:00-04:00</updated><author><name>Snehasish</name></author><id>tag:www.snehasish.net,2012-11-03:notes/splash-2/</id><summary type="html">&lt;p&gt;Recently I was had to compile and run the SPLASH2 benchmark suite. I obtained the package from Ken Barr's website &lt;a href="http://kbarr.net/splash2"&gt;here&lt;/a&gt; and used the PARMACS implementation written by Bastiaan Stougie based on pthreads. I've since made some modifications to it to include macros to mark the begin and end of the region of interest (thread fork to join) for these applications. Here are some notes on fixing the problems I faced while doing so. The server configuration is an AMD Opteron running Ubuntu 10.04 (x86_64).&lt;/p&gt;
&lt;p&gt;For all applications I removed the &lt;code&gt;-Olimit 2000&lt;/code&gt; and &lt;code&gt;-lmpc&lt;/code&gt; switches and added &lt;code&gt;-lpthread&lt;/code&gt; in the included makefiles.&lt;/p&gt;
&lt;h3&gt;barnes&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;Remove &lt;code&gt;#include "ulocks.h"&lt;/code&gt; from &lt;code&gt;defs.H&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Add &lt;code&gt;#include &amp;lt;stdlib.h&amp;gt;&lt;/code&gt; to &lt;code&gt;util.H&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Add &lt;code&gt;#include &amp;lt;errno.h&amp;gt;&lt;/code&gt; to &lt;code&gt;util.H&lt;/code&gt;, the need for this may manifest in 2 ways. Firstly, as noted in &lt;a href="http://thechatterjee.blogspot.ca/2009/07/barnes-hut-splash2-installation-fix.html"&gt;this blog&lt;/a&gt; and secondly (as I observed), &lt;code&gt;ld&lt;/code&gt; segfaults ( collect2: ld terminated with signal 11 [Segmentation fault]).&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;lu&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;There is a semicolon missing at the end of line 203 in lu.C for both contiguous and non-contiguous versions of the program.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;volrend&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;Install libtiff4-dev if not installed, required for tiffio.h (easier than using the libtiff.Z package provided)&lt;/li&gt;
&lt;li&gt;Comment out &lt;code&gt;char *calloc();&lt;/code&gt; line 395 from main.C&lt;/li&gt;
&lt;li&gt;Set or unset -DFLIP depending on endianess. On Opteron it needs to be unset.&lt;/li&gt;
&lt;li&gt;Gunzip the input files (*.den.Z)&lt;/li&gt;
&lt;li&gt;When passing the input name to the program, omit .den extension&lt;/li&gt;
&lt;li&gt;And then it crashes after trying to allocate a density map of size ~6GB. Add -m32 to CFLAGS.&lt;/li&gt;
&lt;li&gt;Set &lt;code&gt;PREPROCESS 1&lt;/code&gt; and &lt;code&gt;RENDER_ONLY 0&lt;/code&gt; in user_options.h&lt;/li&gt;
&lt;li&gt;Clean *.o and executable and recompile&lt;/li&gt;
&lt;li&gt;Running the executable now should give us .norm, .opc, .pyr files in the same dir as the .den file&lt;/li&gt;
&lt;li&gt;Set &lt;code&gt;PREPROCESS 0&lt;/code&gt; and &lt;code&gt;RENDER_ONLY 1&lt;/code&gt; in user_options.h&lt;/li&gt;
&lt;li&gt;Clean *.o and executable and recompile&lt;/li&gt;
&lt;li&gt;Execute with n threads (for command line arg n, it forks off n-1 threads), you should get 4 tiff files, head_000X.tiff.&lt;/li&gt;
&lt;/ol&gt;
&lt;h4&gt;water-spatial&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;Remove extra &lt;code&gt;../&lt;/code&gt; in makefile for path to m4 macro file.&lt;/li&gt;
&lt;li&gt;Comment out redeclaration of &lt;code&gt;srandom()&lt;/code&gt;, initia.C:52&lt;/li&gt;
&lt;/ol&gt;</summary><category term="programming"></category><category term="benchmarks"></category><category term="parallel"></category></entry><entry><title>Computational Investing</title><link href="http://www.snehasish.net/notes/computational-investing/" rel="alternate"></link><updated>2012-10-29T00:00:00-04:00</updated><author><name>Snehasish</name></author><id>tag:www.snehasish.net,2012-10-29:notes/computational-investing/</id><summary type="html">&lt;p&gt;After the completion of the &lt;a href="http://www.snehasish.net/blog/post.php?filename=cG9zdHMvMjAxMi0wOS0yNC1MZWFybmluZyBSLm1k"&gt;"Computing for Data Analysis"&lt;/a&gt; course, I wanted to take another course from Coursera. Looking around, I found "Computational Investing" to be a suitable candidate due to my recent interest in stock markets (fueled by my conversations with &lt;a href="tarmackisser.blogspot.in"&gt;Sudipta Das&lt;/a&gt;), the fact that portfolio managers are users of multiple monitor setups with pretty graphs everywhere, and the fact that the course started only a week back. The &lt;a href="https://www.coursera.org/course/compinvesting1"&gt;course&lt;/a&gt; is taught formally at Georgia Tech by Tucker Balch. The coursera version is split into 2 parts, with the first part of length 8 weeks. Part 1 should culminate in building a stock market simulator in Python (using &lt;a href="http://wiki.quantsoftware.org/index.php?title=QuantSoftware_ToolKit"&gt;QSTK&lt;/a&gt;). All software is supported on Mac and Ubuntu. I'll be taking notes as usual which I guess will mostly be stock market related jargon.&lt;/p&gt;
&lt;h3&gt;Jargon&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;ETF = Electronically Traded Funds&lt;/li&gt;
&lt;li&gt;Two and Twenty = 2% of total assets and 20% of return (in relation to Hedge Fund incentives for Portfolio Managers)&lt;/li&gt;
&lt;li&gt;Back Test = Testing a simulation strategy&lt;/li&gt;
&lt;li&gt;Risk can be defined as standard deviation of return (volatility of the fund)&lt;/li&gt;
&lt;li&gt;Risk can also be defined as draw down ( by how much the portfolio went down when it did)&lt;/li&gt;
&lt;li&gt;Sharpe Ratio = Assessment of performance of the investment with respect to risk. Higher values better&lt;/li&gt;
&lt;li&gt;Portfolio = Group of ETF's managed by a person. Picking which stocks to invest in is a delicate task. Sharpe ratio analyses the risk to reward ratio. It's probably a good idea to combine ETFs to obtain a high Sharpe ratio (&amp;gt;2) so that there is high reward for low risk.&lt;/li&gt;
&lt;li&gt;Paper Trading = Simulated trading on pen and paper (spreadsheets).&lt;/li&gt;
&lt;li&gt;Order Format = (Symbol,Buy/Sell,Market/Limit,Shares,[Price]) - The price is only required if it is a Limit Order. The limit order type ensures that the order doesn't execute unless the limit condition is met.&lt;/li&gt;
&lt;li&gt;Order Book = The order book for a symbol lists the asking price and the bid price offered by traders.&lt;/li&gt;
&lt;li&gt;Spread = Difference between the highest bid price and the lowest ask price for a share. (Spread for frequently traded shares is low)&lt;/li&gt;
&lt;li&gt;Short Selling = Betting on the fact that the price of shares will go down, borrow shares and sell them, wait for price to fall and return shares to owner. &lt;/li&gt;
&lt;li&gt;Arbitrage = Monitoring several exchanges for overlapping spread. Leads to price equity across different markets.&lt;/li&gt;
&lt;li&gt;Market Cap = No. of shares x Price per share&lt;/li&gt;
&lt;li&gt;Intrinsic Value = Sum of GP series of dividend and the discount rate.&lt;/li&gt;
&lt;li&gt;CAPM = Capital Assets Pricing Model. Tries to find the relation between the stock under scrutiny and the market.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;Setting up QSTK&lt;/h3&gt;
&lt;p&gt;Setting up QSTK is &lt;a href="http://wiki.quantsoftware.org/index.php?title=QSToolKit_Installation_Guide_Ubuntu"&gt;well explained in the wiki&lt;/a&gt; and is easily done on Ubuntu. In order to use Sublime Text 2 and its own build system shortcut, add the variables defined in local.sh (present in QSTK root) to the Python.sublime-build json as an env array. The file would now look like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="x"&gt;    &amp;quot;cmd&amp;quot;: [&amp;quot;python&amp;quot;, &amp;quot;-u&amp;quot;, &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;file&lt;/span&gt;&lt;span class="x"&gt;&amp;quot;],&lt;/span&gt;
&lt;span class="x"&gt;    &amp;quot;file_regex&amp;quot;: &amp;quot;^[ ]*File \&amp;quot;(...*?)\&amp;quot;, line ([0-9]*)&amp;quot;,&lt;/span&gt;
&lt;span class="x"&gt;    &amp;quot;selector&amp;quot;: &amp;quot;source.python&amp;quot;,&lt;/span&gt;

&lt;span class="x"&gt;    &amp;quot;env&amp;quot;:&lt;/span&gt;
&lt;span class="x"&gt;    &lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="x"&gt;        &amp;quot;PATH&amp;quot;: &amp;quot;/usr/lib/lightdm/lightdm:/usr/local/sbin:/usr/local/bin:/home/ska124/QSTK/Bin&amp;quot;,&lt;/span&gt;
&lt;span class="x"&gt;        &amp;quot;PYTHONPATH&amp;quot;: &amp;quot;:/home/ska124/QSTK:/home/ska124/QSTK/Bin:/usr/local/lib/NAG/&amp;quot;,&lt;/span&gt;
&lt;span class="x"&gt;        &amp;quot;QS&amp;quot;: &amp;quot;/home/ska124/QSTK&amp;quot;,&lt;/span&gt;
&lt;span class="x"&gt;        &amp;quot;QSDATA&amp;quot;: &amp;quot;/home/ska124/QSTK/QSData&amp;quot;,&lt;/span&gt;
&lt;span class="x"&gt;        &amp;quot;HOSTNAME&amp;quot;: &amp;quot;Qosmio&amp;quot;,&lt;/span&gt;
&lt;span class="x"&gt;        &amp;quot;QSDATAPROCESSED&amp;quot;: &amp;quot;/home/ska124/QSTK/QSData/Processed&amp;quot;,&lt;/span&gt;
&lt;span class="x"&gt;        &amp;quot;QSDATATMP&amp;quot;: &amp;quot;/home/ska124/QSTK/QSData/Tmp&amp;quot;,&lt;/span&gt;
&lt;span class="x"&gt;        &amp;quot;QSBIN&amp;quot;: &amp;quot;/home/ska124/QSTK/Bin&amp;quot;,&lt;/span&gt;
&lt;span class="x"&gt;        &amp;quot;QSSCRATCH&amp;quot;: &amp;quot;/home/ska124/QSTK/QSData/Scratch&amp;quot;,&lt;/span&gt;
&lt;span class="x"&gt;        &amp;quot;CACHESTALLTIME&amp;quot;: &amp;quot;12&amp;quot;&lt;/span&gt;
&lt;span class="x"&gt;    }&lt;/span&gt;
&lt;span class="x"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</summary><category term="coursera"></category><category term="investing"></category></entry><entry><title>MoaR</title><link href="http://www.snehasish.net/notes/moar/" rel="alternate"></link><updated>2012-09-27T00:00:00-04:00</updated><author><name>Snehasish</name></author><id>tag:www.snehasish.net,2012-09-27:notes/moar/</id><summary type="html">&lt;p&gt;Starting from where I left of in the "Learning R" &lt;a href="http://www.snehasish.net/blog/post.php?filename=cG9zdHMvMjAxMi0wOS0yNC1MZWFybmluZyBSLm1k"&gt;note&lt;/a&gt;:&lt;/p&gt;
&lt;h3&gt;Control Structures&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;if(...)&lt;/code&gt; conditions can be written in the standard format with assignment inside or in this fashion as shown, note that x should be a scalar value (i.e vector of length exactly 1).&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# Assign value to y on condition&lt;/span&gt;

y &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="kr"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;x &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="m"&gt;3&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="m"&gt;10&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="kr"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="m"&gt;5&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;for(...)&lt;/code&gt; loops can be written in various ways&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;#Looping on a vector&lt;/span&gt;
x &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;a&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;b&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;c&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;d&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# Type 1&lt;/span&gt;
&lt;span class="kr"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;i &lt;span class="kr"&gt;in&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="m"&gt;4&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="kp"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;x&lt;span class="p"&gt;[&lt;/span&gt;i&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;#Type 2&lt;/span&gt;
&lt;span class="kr"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;i &lt;span class="kr"&gt;in&lt;/span&gt; &lt;span class="kp"&gt;seq_along&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;x&lt;span class="p"&gt;)){&lt;/span&gt;
    &lt;span class="kp"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;x&lt;span class="p"&gt;[&lt;/span&gt;i&lt;span class="p"&gt;])&lt;/span&gt; 
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;#Type 3&lt;/span&gt;
&lt;span class="kr"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;letter &lt;span class="kr"&gt;in&lt;/span&gt; x&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="kp"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;letter&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;#Looping on matrix indices&lt;/span&gt;
&lt;span class="c1"&gt;#seq_len() is equivalent to Python&amp;#39;s range()&lt;/span&gt;
x &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="kt"&gt;matrix&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="m"&gt;12&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="kr"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;i &lt;span class="kr"&gt;in&lt;/span&gt; &lt;span class="kp"&gt;seq_len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kp"&gt;nrow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;x&lt;span class="p"&gt;))){&lt;/span&gt;
    &lt;span class="kr"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;j &lt;span class="kr"&gt;in&lt;/span&gt; &lt;span class="kp"&gt;seq_len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kp"&gt;ncol&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;x&lt;span class="p"&gt;))){&lt;/span&gt;
        &lt;span class="kp"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;x&lt;span class="p"&gt;[&lt;/span&gt;i&lt;span class="p"&gt;,&lt;/span&gt;j&lt;span class="p"&gt;])&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;repeat&lt;/code&gt; can be used for unfinite loops, terminated by using a conditional &lt;code&gt;break&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;next&lt;/code&gt; can be used to skip an iteration&lt;/li&gt;
&lt;li&gt;Functions in R are first class objects, thus allowing passing functions as parameters and nesting functions. Return is whatever the last line in the function evaluates.&lt;/li&gt;
&lt;li&gt;Use the &lt;code&gt;args&lt;/code&gt; function to find out all the arguments of a function. Named arguments useful for functions with long argument lists (Preserve order when using to be safe).&lt;/li&gt;
&lt;li&gt;Lazy evaluation, errors thrown on use.&lt;/li&gt;
&lt;li&gt;Variable args with &lt;code&gt;(...)&lt;/code&gt;, but args named after this must be named explicitly.&lt;/li&gt;
&lt;li&gt;R has separate function and object namespaces, thus its possible to have functions and objects with the same name. Also symbols not defined in the current environment will be searched for in the parent environment until we hit the top-level environment, then down the &lt;code&gt;search()&lt;/code&gt; list until we hit the empty environment. So be very careful.&lt;/li&gt;
&lt;li&gt;Loop functions (&lt;code&gt;apply&lt;/code&gt; family) are used on lists/vectors and called on each element of the list/vector. The basic version of apply is &lt;code&gt;lappy&lt;/code&gt; - the function is applied to all elements of the list without simplification.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;equal.count(...)&lt;/code&gt; can partition the given data into desired number of ranges.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;Debugging in R&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;traceback&lt;/code&gt; prints out the function call stack once an error occurs. Does nothing if no error occurs.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;debug&lt;/code&gt; step through functions one line at a time.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;browser&lt;/code&gt; suspends the execution of the function whenever it is called and starts debugging.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;trace&lt;/code&gt; allows insertion of debugging code into a function at specific places.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;recover&lt;/code&gt; allows modification of the error behaviour so that the function call stack can be examined.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;Plotting in R&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;Using the &lt;code&gt;base&lt;/code&gt; plotting package, you can create a plot incrementally (like Matlab).&lt;ol&gt;
&lt;li&gt;The function &lt;code&gt;par(...)&lt;/code&gt; contains a lot of arguments which specify the properties of the plot. It's a getter/setter method. &lt;/li&gt;
&lt;li&gt;&lt;code&gt;plot(...)&lt;/code&gt; - Create a plot depending of the class of the object&lt;/li&gt;
&lt;li&gt;&lt;code&gt;lines(...)&lt;/code&gt; - Add lines to a plot, needs a vector of &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt; or a 2D matrix&lt;/li&gt;
&lt;li&gt;&lt;code&gt;points(...)&lt;/code&gt; - Add points to a plot&lt;/li&gt;
&lt;li&gt;&lt;code&gt;text(...)&lt;/code&gt; - Add text at &lt;code&gt;x,y&lt;/code&gt; co-ordinates&lt;/li&gt;
&lt;li&gt;&lt;code&gt;mtext(...)&lt;/code&gt; - Add margin text&lt;/li&gt;
&lt;li&gt;&lt;code&gt;axis(...)&lt;/code&gt; - Add axis ticks and/or labels&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;Using the &lt;code&gt;lattice&lt;/code&gt; graphics package, plots are created by a single function call with a large amount of arguments, its useful because then margins and layouts are generated automatically.&lt;/li&gt;
&lt;li&gt;Workflow for plotting:&lt;ol&gt;
&lt;li&gt;Launch a graphics device (pdf, postscript, xfig, etc ...)&lt;/li&gt;
&lt;li&gt;Make a plot&lt;/li&gt;
&lt;li&gt;Close the graphics device&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;Margins of a plot are numbered 1 to 4, clockwise with 1 being the South margin.&lt;/li&gt;
&lt;/ol&gt;</summary></entry><entry><title>Learning R</title><link href="http://www.snehasish.net/notes/learning-r/" rel="alternate"></link><updated>2012-09-24T00:00:00-04:00</updated><author><name>Snehasish</name></author><id>tag:www.snehasish.net,2012-09-24:notes/learning-r/</id><summary type="html">&lt;p&gt;I've spent almost the entire time as Master's student wrestling with different plotting tools and wondering about how best to visualise the data I collect, and working in the field of &lt;em&gt;Computer Architecture&lt;/em&gt; means that there is a lot of data to analyse. I've finally decided to rectify this wrong and learn &lt;em&gt;R&lt;/em&gt;. "&lt;em&gt;R&lt;/em&gt; is a free software environment for statistical computing and graphics" (&lt;a href="http://www.r-project.org/" title="The R Project"&gt;Homepage&lt;/a&gt;). &lt;a href="https://www.coursera.org/" title="Coursera Homepage"&gt;Coursera&lt;/a&gt; is offering a month-long course on &lt;em&gt;R&lt;/em&gt; called &lt;a href="https://www.coursera.org/course/compdata"&gt;Computing for Data Analysis&lt;/a&gt;, taught by Dr. Roger D. Peng who is an Associate Professor of Biostatistics at the Johns Hopkins Bloomberg School of Public Health and a Co-Editor of the &lt;a href="http://simplystatistics.org/"&gt;Simply Statistics blog&lt;/a&gt;. The course is structured based on the Mac and Windows distributions of R. I've decided to stick to Linux (Ubuntu 12.04). I have listed the Linux equivalents of any platform specific issues I come across.&lt;/p&gt;
&lt;h3&gt;Installing R and R-Studio on Ubuntu 12.04&lt;/h3&gt;
&lt;p&gt;To install &lt;em&gt;R&lt;/em&gt; on Ubuntu using from your repository using apt-get, type the following into a terminal screen&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gpg --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys E084DAB9
gpg -a --export E084DAB9 | sudo apt-key add -
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Add the mirror to your apt/sources.list file using&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;echo &amp;quot;deb http://cran.stat.sfu.ca/bin/linux/ubuntu precise/&amp;quot; | sudo tee -a /etc/apt/sources.list
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You can using a different mirror depending on your location/preference. Install the R packages with the following commands&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo apt-get update
sudo apt-get install r-base
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You can now go ahead and &lt;a href="http://rstudio.org/download/desktop"&gt;download R Studio&lt;/a&gt;. Download the corresponding debian package (.deb) file for your architecture. Try installing the package using the command&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo dpkg -i rstudio-0.96.331-amd64.deb
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You might get an error similar to what I saw, depending on which packages are missing ( R Studio depends on a lot of Qt packages which you may not have installed)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Selecting previously unselected package rstudio.
(Reading database ... 164510 files and directories currently installed.)
Unpacking rstudio (from rstudio-0.96.331-amd64.deb) ...
dpkg: dependency problems prevent configuration of rstudio:
 rstudio depends on libjpeg62; however:
  Package libjpeg62 is not installed.
dpkg: error processing rstudio (--install):
 dependency problems - leaving unconfigured
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;So I went ahead and installed the missing package&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo apt-get install libjpeg62
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;And now we have R Studio ready. If for some reason that doesn't work for you check out the Cran &lt;a href="http://cran.r-project.org/bin/linux/ubuntu/README.html"&gt;Ubuntu Readme&lt;/a&gt;. &lt;/p&gt;
&lt;h3&gt;R Basics&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;Bash style comments with #&lt;/li&gt;
&lt;li&gt;Everything is an object and by default variables are vectors of objects.&lt;/li&gt;
&lt;li&gt;Primitives are called &lt;em&gt;Atomic&lt;/em&gt; objects:&lt;ol&gt;
&lt;li&gt;Numeric&lt;/li&gt;
&lt;li&gt;Char&lt;/li&gt;
&lt;li&gt;Integer &lt;/li&gt;
&lt;li&gt;Complex&lt;/li&gt;
&lt;li&gt;Logical&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;Vectors contain only a single type of object&lt;/li&gt;
&lt;li&gt;Lists are special vectors which can contain multiple types of objects&lt;/li&gt;
&lt;li&gt;Assignment operator is &lt;code&gt;&amp;lt;-&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Operator &lt;code&gt;:&lt;/code&gt; to create sequences (Similar to Matlab, but does not take 3 args)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;c(...)&lt;/code&gt; - Create vector from args. Also concat vectors of same type&lt;/li&gt;
&lt;li&gt;&lt;code&gt;vector(type,length)&lt;/code&gt; - Create vector with default value using arguments&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Type coercion&lt;/em&gt; when &lt;code&gt;c(...)&lt;/code&gt; used with non matching types - Silent - Watchout!&lt;/li&gt;
&lt;li&gt;Explicit coercion using function as.&lt;em&gt;type&lt;/em&gt;. E.g. - &lt;code&gt;as.numeric("a")&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;class(...)&lt;/code&gt; - returns type information for arg.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;NaN&lt;/code&gt; - Not a Number , &lt;code&gt;Inf&lt;/code&gt; - Infinity , &lt;code&gt;NA&lt;/code&gt; - Not Available&lt;/li&gt;
&lt;li&gt;&lt;code&gt;is.na()&lt;/code&gt; to check for &lt;code&gt;NA&lt;/code&gt; and &lt;code&gt;is.nan()&lt;/code&gt; to check for &lt;code&gt;NAN&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;factor(c(...)[, levels=c(...)])&lt;/code&gt; creates a vector which I feel best descibed as &lt;em&gt;auto enumeration&lt;/em&gt;, further more levels can be explicitly enumerated, this is useful for specifying baseline levels as some functions pick up the first level as the baseline.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;table(...)&lt;/code&gt; returns the frequency count&lt;/li&gt;
&lt;li&gt;R objects can have names. E.g. &lt;code&gt;names(x) &amp;lt;- c("a","b","c")&lt;/code&gt; &lt;/li&gt;
&lt;li&gt;&lt;code&gt;??string&lt;/code&gt; in R Studio will search the documentation for &lt;code&gt;string&lt;/code&gt; and return relevant results &lt;/li&gt;
&lt;li&gt;&lt;code&gt;str(...)&lt;/code&gt; returns info about the object&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;Matrices in R&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;matrix(nrow,ncol)&lt;/code&gt; - Creates a matrix of NA with specified dimensions&lt;/li&gt;
&lt;li&gt;&lt;code&gt;dim(...)&lt;/code&gt; - Returns the dimensions of the matrix&lt;/li&gt;
&lt;li&gt;&lt;code&gt;attributes(...)&lt;/code&gt; - Shows attributes including dimension&lt;/li&gt;
&lt;li&gt;Sequence can be used to create matrix. &lt;code&gt;matrix(1:n,nrow,ncol)&lt;/code&gt; creates nrowXncol matrix with the elements of the sequence in column-major order&lt;/li&gt;
&lt;li&gt;Forcing a matrix dimension on a vector will create a matrix. E.g. - &lt;code&gt;dim(m) &amp;lt;- c(2,3)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cbind(...)&lt;/code&gt; and &lt;code&gt;rbind(...)&lt;/code&gt; are R equivalents of &lt;code&gt;vertcat&lt;/code&gt; and &lt;code&gt;horzcat&lt;/code&gt; in Matlab &lt;/li&gt;
&lt;li&gt;&lt;code&gt;nrow(...)&lt;/code&gt; for number of rows and &lt;code&gt;ncol(...)&lt;/code&gt; for number of columns&lt;/li&gt;
&lt;li&gt;Matrix dimensions can have names. Use &lt;code&gt;dimnames(x) &amp;lt;- list(c(...),c(...))&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;Data Frames&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;Special data structure to deal with tabular data&lt;/li&gt;
&lt;li&gt;Each column is a vector of objects. (Thus each column should have objects of same type)&lt;/li&gt;
&lt;li&gt;Unlike matrices, different columns can have different types of objects&lt;/li&gt;
&lt;li&gt;Create a dummy data frame using &lt;code&gt;x &amp;lt;- data.frame(col1=1:5,col2=c(T,F,F,F,F))&lt;/code&gt;. &lt;code&gt;col1&lt;/code&gt; and &lt;code&gt;col2&lt;/code&gt; are the names of the columns and can be accessed by the &lt;code&gt;row.names&lt;/code&gt; attribute&lt;/li&gt;
&lt;li&gt;Data frames are usually created using &lt;code&gt;read.table()&lt;/code&gt; or &lt;code&gt;read.csv()&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;Subsetting and Vector Operations&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;Operator &lt;code&gt;[index]&lt;/code&gt; returns subset of same type, here index itself can be range or a vector&lt;/li&gt;
&lt;li&gt;Operator &lt;code&gt;[["name"]]&lt;/code&gt; returns object, can also be used to retrieve objects by index, cannot be used to extract multiple elements, tries an exact match for &lt;code&gt;name&lt;/code&gt; by default (this behaviour can be modified by setting &lt;code&gt;exact=FALSE&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;Operator &lt;code&gt;$&lt;/code&gt; returns object by name, also does partial matching of the name to lookup&lt;/li&gt;
&lt;li&gt;Subsetting works on matrices as well, however &lt;code&gt;[,drop=FALSE]&lt;/code&gt; needs to be specified in order to ensure that return is a matrix and not a vector. Indices can also be missing which would mean fetch the entire range. E.g. &lt;code&gt;mat[,2]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;complete.cases(...)&lt;/code&gt; returns a vector of &lt;code&gt;TRUE/FALSE&lt;/code&gt; where all indices of args are not &lt;code&gt;NA&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Subset chaining is possible. E.g. &lt;code&gt;x[1:10][1:5]&lt;/code&gt; where x is a 1-dimensional vector&lt;/li&gt;
&lt;li&gt;Normal operators are applied to vector &lt;em&gt;per element&lt;/em&gt;, matrix operations are performed by enclosing with %. E.g. &lt;code&gt;x %*% y&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;subset(x, &amp;lt;logical vector&amp;gt;)&lt;/code&gt; returns the subset using the logical vector.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;Read/Writing Data&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;read.table(...)&lt;/code&gt; returns data frame, see docs for args, &lt;code&gt;read.csv(...)&lt;/code&gt; is similar except the default separator is a comma&lt;/li&gt;
&lt;li&gt;&lt;code&gt;read.table(...)&lt;/code&gt; can get out of hand for very large data sets. Also object metadata overhead increases memory consumption to ~2X.&lt;/li&gt;
&lt;li&gt;R also detects the type of each element whilst loading, if &lt;code&gt;colClasses&lt;/code&gt; are specified then a noticable speedup can be attained. Here is a way of quickly picking up the correct classes:&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;initial &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; read.table&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;data.txt&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;nrows&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;100&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
classes &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="kp"&gt;sapply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;initial&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kp"&gt;class&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
full    &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; read.table&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;data.txt&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; colClasses&lt;span class="o"&gt;=&lt;/span&gt;classes&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;Environment&lt;/h3&gt;
&lt;p&gt;The course describes usage on Mac and Windows. Here I will be documenting the Linux equivalents using R Studio. &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Set working director is found under &lt;code&gt;Tools &amp;gt; Set Working Directory &amp;gt; Choose Working Directory (Ctrl+Shift+K)&lt;/code&gt; in R Studio. Alternatively use command &lt;code&gt;setwd(...)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;dir()&lt;/code&gt; gets contents of current working directory and &lt;code&gt;ls()&lt;/code&gt; get contents of workspace (functions and objects loaded in the workspace like Matlab)&lt;/li&gt;
&lt;li&gt;R scripts are saved with .R extension and functions syntax looks like this&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;funtion_name &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="kr"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kp"&gt;args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;# Code&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ol&gt;
&lt;li&gt;&lt;code&gt;source&lt;/code&gt;'ing the file will load the functions into the workspace&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;</summary><category term="R"></category><category term="programming"></category><category term="statistics"></category><category term="coursera"></category></entry><entry><title>Reboot</title><link href="http://www.snehasish.net/notes/reboot/" rel="alternate"></link><updated>2012-09-18T00:00:00-04:00</updated><author><name>Snehasish</name></author><id>tag:www.snehasish.net,2012-09-18:notes/reboot/</id><summary type="html">&lt;h3&gt;Update&lt;/h3&gt;
&lt;p&gt;I've moved away from the home-brew solution and I am now using &lt;a href="http://docs.getpelican.com"&gt;Pelican&lt;/a&gt; to generate the blog statically. I use the same Markdown notes to generate the content and the theme is written from scratch based on the "theme-basic" template using twitter bootstrap2. The site is now statically generated and is hosted on &lt;a href="https://github.com/snehasish/snehasish.github.io"&gt;Github&lt;/a&gt;.  &lt;/p&gt;
&lt;p&gt;The old notes below document my previous setup.  &lt;/p&gt;
&lt;p&gt;July 2013&lt;/p&gt;
&lt;h3&gt;Introduction&lt;/h3&gt;
&lt;p&gt;After a couple of failed attempts at maintaining a 'blog' I've realised that I've been treating it as a chore, where it should really be a hobby. This time I will attempt to keep it short and more simple. More like a collection of notes which incidentally are public. This was the main factor behind not using a standard 'blogging' platform such as Wordpress or Blogspot. Instead I've decided to rely on a homebrew, hacked together solution, though not a wholly original one. &lt;/p&gt;
&lt;h3&gt;Hosting&lt;/h3&gt;
&lt;p&gt;This blog is hosted on &lt;em&gt;heroku&lt;/em&gt;. &lt;em&gt;Heroku&lt;/em&gt; is a Platform-as-a-Service provider which allows me to focus on the app and not worry about server management. A basic webservice (&lt;a href="https://devcenter.heroku.com/articles/dynos"&gt;dyno&lt;/a&gt; in &lt;em&gt;heroku&lt;/em&gt; terminology) is provided for free for 750 hours a month. For my personal website, a single web dyno should be sufficient for the time being. Though the Heroku site does not state explicit support for PHP, they do support "Facebook" applications and thus PHP. There are other options such as &lt;a href="http://www.phpcloud.com/"&gt;PHPCloud&lt;/a&gt; and &lt;a href="https://www.appfog.com/"&gt;AppFog&lt;/a&gt;. I looked into AppFog while setting up the site, but it was having some issues with creating a new app on the couple of days that I tried so I decided to stick to &lt;em&gt;Heroku&lt;/em&gt;.&lt;/p&gt;
&lt;h3&gt;Setup&lt;/h3&gt;
&lt;p&gt;I signed up for the service and downloaded the &lt;em&gt;Heroku Toolbelt&lt;/em&gt; application from the Canonical repository for Ubuntu 12.04. Here are the steps I followed:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Create a ssh key (I already had one made)&lt;/li&gt;
&lt;li&gt;Create a folder with an &lt;code&gt;index.php&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Login to Heroku using &lt;code&gt;heroku login&lt;/code&gt; and follow the steps outlined &lt;a href="https://devcenter.heroku.com/articles/git"&gt;here&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Deploying the application is as simple as a &lt;code&gt;git push&lt;/code&gt; to the &lt;code&gt;heroku master&lt;/code&gt; branch. (It's added as a remote.)&lt;/li&gt;
&lt;li&gt;You can also add .htaccess rules as required.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;Posts&lt;/h3&gt;
&lt;p&gt;There has been a recent increase in popularity of &lt;em&gt;static&lt;/em&gt; blogging, with the use of templating engines like &lt;em&gt;Jekyll&lt;/em&gt;. I was tempted initially to do the same but I refrained, instead I write my posts in &lt;a href="http://daringfireball.net/projects/markdown/" title="John Gruber's Abomination"&gt;Markdown&lt;/a&gt; and dynamically render them as HTML using the &lt;a href="http://michelf.ca/projects/php-markdown/" title="Yay! Canadian!"&gt;PHP Markdown&lt;/a&gt; script. Thus I just take notes, name them properly and stick them in a folder. These are then enumerated on the blog index &lt;a href="http://www.snehasish.net/blog" title="Blog Posts"&gt;page&lt;/a&gt;. Here are some similar projects:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href="https://github.com/marcoarment/secondcrack"&gt;Second Crack&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://svbtle.com/"&gt;Svbtle&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/natew/obtvse"&gt;Obtvse&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;</summary></entry></feed>